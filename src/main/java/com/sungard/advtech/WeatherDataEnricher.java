package com.sungard.advtech;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.api.services.bigquery.model.TableRow;
import com.google.cloud.dataflow.sdk.transforms.Aggregator;
import com.google.cloud.dataflow.sdk.transforms.DoFn;
import com.google.cloud.dataflow.sdk.transforms.Sum;
import com.google.cloud.dataflow.sdk.values.PCollectionView;
import com.sungard.advtech.data.StationDetails;
import com.sungard.advtech.data.WeatherAtStation;

/**
 * Maps a input {@link TableRow} of the sample weather data to a {link WeatherAtStation}
 * using the side input of {@link StationDetails} generated by {@link com.sungard.advtech.ISDHistoryParser}.
 */
public class WeatherDataEnricher extends DoFn<TableRow, WeatherAtStation> {
    private static final long serialVersionUID = 1L;
    private static final Logger LOG = LoggerFactory.getLogger(WeatherDataEnricher.class);

    // Reference to the side input view
    private final PCollectionView<Map<String, StationDetails>> isdHistoryView;
    // Simple error tracking to see how many stations could not be resolved
    private final Aggregator<Integer, Integer> unknownStations = createAggregator("Amount of unknown stations", new Sum.SumIntegerFn());

    public WeatherDataEnricher(PCollectionView<Map<String, StationDetails>> isdHistoryView) {
        this.isdHistoryView = isdHistoryView;
    }

    @Override
    public void processElement(ProcessContext context) {
        TableRow row = context.element();
        // Extract all the interesting data
        String stationNumber = row.get("station_number").toString();
        int year = Integer.parseInt(row.get("year").toString());
        int month = Integer.parseInt(row.get("year").toString());
        int day = Integer.parseInt(row.get("day").toString());
        float meanTemp = Float.parseFloat(row.get("mean_temp").toString());

        // Lookup geo data from the side input
        Map<String, StationDetails> isdHistory = context.sideInput(isdHistoryView);
        StationDetails stationDetails = isdHistory.get(stationNumber);

        // Create the internal data structure if all data is available
        if (stationDetails != null) {
            context.output(WeatherAtStation.of(year, month, day, meanTemp, stationDetails));
        } else {
            // Otherwise just increase the counter for simple error tracking
            unknownStations.addValue(1);
            LOG.warn("Could not find station {}", stationNumber);
        }
    }
}